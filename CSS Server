import java.util.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.*;
import java.time.Duration;
import java.time.Instant;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server {
    private static Instant startTime;
    
    public static void main(String[] args) {
        // Check arguments
        if (args.length < 1) {
            System.out.println("Usage: java Server <port>");
            return;
        }
        
        int port = Integer.parseInt(args[0]);
        startTime = Instant.now();
        
        // Create thread pool for handling client connections
        ExecutorService executor = Executors.newCachedThreadPool();
        
        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("Server now connected on port " + port);
            
            while (true) {
                try {
                    // Accept client connection
                    Socket clientSocket = serverSocket.accept();
                    System.out.println("Client connected from " + clientSocket.getInetAddress());
                    
                    // Spawn a new thread to handle this client
                    executor.submit(new ClientHandler(clientSocket, startTime));
                    
                } catch (IOException e) {
                    System.out.println("Error accepting client connection: " + e.getMessage());
                }
            }
        } catch (IOException ex) {
            System.out.println("Server exception: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            executor.shutdown();
        }
    }
    
    // Helper method for executing system commands
    static String executeCommand(List<String> command) {
        StringBuilder output = new StringBuilder();
        try {
            ProcessBuilder processBuilder = new ProcessBuilder(command);
            processBuilder.redirectErrorStream(true);
            Process process = processBuilder.start();
            
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    output.append(line).append("\n");
                }
            }
            process.waitFor();
        } catch (IOException | InterruptedException e) {
            return "Error executing command: " + e.getMessage();
        }
        return output.toString().trim();
    }
}

// Class to handle individual client connections
class ClientHandler implements Runnable {
    private final Socket clientSocket;
    private final Instant serverStartTime;
    
    public ClientHandler(Socket socket, Instant startTime) {
        this.clientSocket = socket;
        this.serverStartTime = startTime;
    }
    
    @Override
    public void run() {
        try (
            BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true)
        ) {
            String clientMessage;
            while ((clientMessage = reader.readLine()) != null) {
                int choice;
                try {
                    choice = Integer.parseInt(clientMessage);
                } catch (NumberFormatException e) {
                    writer.println("Invalid input. Please enter a valid command.");
                    writer.println("END_OF_RESPONSE");
                    continue;
                }
                
                String response = "";
                // Handle choices
                switch (choice) {
                    case 1:
                        // Shows date and time
                        response = "Server Date and Time: " + new Date().toString();
                        break;
                    case 2:
                        // Shows how long server has been active
                        response = "Server Uptime: " + 
                                Duration.between(serverStartTime, Instant.now()).toSeconds() + " seconds";
                        break;
                    case 3:
                        // Shows memory use
                        response = "Memory Usage: " + 
                                (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / 1024 + " KB";
                        break;
                    case 4:
                        // Shows list of network connections on the server
                        response = Server.executeCommand(List.of("netstat", "-an"));
                        break;
                    case 5:
                        // Shows list of users currently connected to the server
                        response = Server.executeCommand(List.of("who"));
                        break;
                    case 6:
                        // Shows list of programs currently running on the server
                        response = Server.executeCommand(List.of("ps", "-aux"));
                        break;
                    case 7:
                        // Closes connection
                        response = "Closing connection.";
                        writer.println(response);
                        writer.println("END_OF_RESPONSE");
                        writer.flush();
                        return; // Exit the thread
                    default:
                        response = "Invalid choice";
                }
                
                writer.println(response);
                writer.println("END_OF_RESPONSE");
                writer.flush();
            }
        } catch (IOException e) {
            System.out.println("Error handling client: " + e.getMessage());
        } finally {
            try {
                clientSocket.close();
                System.out.println("Connection with client closed");
            } catch (IOException e) {
                System.out.println("Error closing client socket: " + e.getMessage());
            }
        }
    }
}
